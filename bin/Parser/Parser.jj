/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*/options {
    STATIC = false;
                 
                                  
                           
                                                   
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)
import Magenta.parser.generatednodes.*;



public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
    public static void main(String[] args) {

        try {
            Parser parser = new Parser(new FileInputStream(args[0]));
            parser.parse();
            ((ASTNode) parser.jjtree.rootNode()).dump("   ");
            RuntimeNode.runRootNode((ASTNode) parser.jjtree.rootNode());
        } catch (Exception exception) {
            System.out.println("Something went wrong.");
            System.out.println("Exception: ");
            System.out.println(exception);
        }
    }
}
PARSER_END(Parser)

void parse(): {/*@bgen(jjtree) parse */
  ASTGenerated_parse jjtn000 = new ASTGenerated_parse(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) parse */
    try {
/*@egen*/
    (
        LOOKAHEAD(2)
        class_declaration()
    |   LOOKAHEAD(4)
        func_declaration()
    |   func_action()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void func_action(): {/*@bgen(jjtree) func_action */
  ASTGenerated_func_action jjtn000 = new ASTGenerated_func_action(JJTFUNC_ACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) func_action */
        try {
/*@egen*/
	LOOKAHEAD(2)
	variable_declaration()
	LOOKAHEAD(2)
	variable_assignment()
	LOOKAHEAD(2)
	class_method() <PUNCSEMICOLON>
|   func_call() <PUNCSEMICOLON>
|   (statements() (<PUNCSEMICOLON>)?)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void func_actions(): {/*@bgen(jjtree) func_actions */
  ASTGenerated_func_actions jjtn000 = new ASTGenerated_func_actions(JJTFUNC_ACTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) func_actions */
        try {
/*@egen*/
	(
	  LOOKAHEAD(2)
	  func_action()	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void func_declaration(): {/*@bgen(jjtree) func_declaration */
  ASTGenerated_func_declaration jjtn000 = new ASTGenerated_func_declaration(JJTFUNC_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) func_declaration */
        try {
/*@egen*/
  	<KEYTASK>
	identifier()
	<PUNCLEFTPAREN>
	params()
	<PUNCRIGHTPAREN>
	type()
	<PUNCOPENARROW>
    func_action()
    <PUNCCLOSEARROW>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void param(): {/*@bgen(jjtree) param */
  ASTGenerated_param jjtn000 = new ASTGenerated_param(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) param */
        try {
/*@egen*/
	type() identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void params(): {/*@bgen(jjtree) params */
  ASTGenerated_params jjtn000 = new ASTGenerated_params(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) params */
        try {
/*@egen*/
	(
	  LOOKAHEAD(2)
	  <PUNCCOMMA> param()	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void func_declartions(): {/*@bgen(jjtree) func_declartions */
  ASTGenerated_func_declartions jjtn000 = new ASTGenerated_func_declartions(JJTFUNC_DECLARTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) func_declartions */
 try {
/*@egen*/
 (
   func_declaration() )*/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void class_declaration(): {/*@bgen(jjtree) class_declaration */
  ASTGenerated_class_declaration jjtn000 = new ASTGenerated_class_declaration(JJTCLASS_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) class_declaration */
        try {
/*@egen*/
  	<KEYBLOCK>
	type_name()
    <PUNCOPENARROW>
    variable_assignments()
    variable_declarations()
    func_declartions()
    <PUNCCLOSEARROW>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//instantiate a class
void class_instantiation(): {/*@bgen(jjtree) class_instantiation */
  ASTGenerated_class_instantiation jjtn000 = new ASTGenerated_class_instantiation(JJTCLASS_INSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) class_instantiation */
        try {
/*@egen*/
	identifier() <PUNCLEFTPAREN> values() <PUNCRIGHTPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//calling a method from a class
void class_method(): {/*@bgen(jjtree) class_method */
  ASTGenerated_class_method jjtn000 = new ASTGenerated_class_method(JJTCLASS_METHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ } {/*@bgen(jjtree) class_method */
        try {
/*@egen*/
	identifier() <PUNCPERIOD> func_call()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//get property of class
void class_property_get(): {/*@bgen(jjtree) class_property_get */
  ASTGenerated_class_property_get jjtn000 = new ASTGenerated_class_property_get(JJTCLASS_PROPERTY_GET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) class_property_get */
        try {
/*@egen*/
	identifier() <PUNCPERIOD> lowercase_identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

//calling a function
void func_call(): {/*@bgen(jjtree) func_call */
  ASTGenerated_func_call jjtn000 = new ASTGenerated_func_call(JJTFUNC_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) func_call */
        try {
/*@egen*/
	<KEYTASK> identifier() <PUNCLEFTPAREN> values() <PUNCRIGHTPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

//assign a variable
void variable_assignment(): {/*@bgen(jjtree) variable_assignment */
  ASTGenerated_variable_assignment jjtn000 = new ASTGenerated_variable_assignment(JJTVARIABLE_ASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) variable_assignment */
        try {
/*@egen*/
	identifier() <PUNCEQUALSIGN> value() <PUNCSEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//multiple variable assignments
void variable_assignments(): {/*@bgen(jjtree) variable_assignments */
  ASTGenerated_variable_assignments jjtn000 = new ASTGenerated_variable_assignments(JJTVARIABLE_ASSIGNMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) variable_assignments */
        try {
/*@egen*/
	(
        LOOKAHEAD(2)
        variable_assignment()
    )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}  

//declare a variable
void variable_declaration(): {/*@bgen(jjtree) variable_declaration */
  ASTGenerated_variable_declaration jjtn000 = new ASTGenerated_variable_declaration(JJTVARIABLE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) variable_declaration */
        try {
/*@egen*/
	type() identifier() <PUNCEQUALSIGN> value() <PUNCSEMICOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//declare multiple variables
void variable_declarations(): {/*@bgen(jjtree) variable_declarations */
  ASTGenerated_variable_declarations jjtn000 = new ASTGenerated_variable_declarations(JJTVARIABLE_DECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) variable_declarations */
        try {
/*@egen*/
	(
        LOOKAHEAD(2)
        variable_declaration()
    )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void identifier(): {/*@bgen(jjtree) identifier */
                     ASTGenerated_identifier jjtn000 = new ASTGenerated_identifier(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) identifier */
        try {
/*@egen*/
	underscore_identifier()
| 	lowercase_identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//holds the identifier (name) for functions and variables

void underscore_identifier(): {/*@bgen(jjtree) underscore_identifier */
                               ASTGenerated_underscore_identifier jjtn000 = new ASTGenerated_underscore_identifier(JJTUNDERSCORE_IDENTIFIER);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; } {/*@bgen(jjtree) underscore_identifier */
        try {
/*@egen*/
	t = <IDENTUNDERSCORE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void lowercase_identifier(): {/*@bgen(jjtree) lowercase_identifier */
                              ASTGenerated_lowercase_identifier jjtn000 = new ASTGenerated_lowercase_identifier(JJTLOWERCASE_IDENTIFIER);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; } {/*@bgen(jjtree) lowercase_identifier */
        try {
/*@egen*/
	t = <IDENTLOWERCASE>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void type_name(): {/*@bgen(jjtree) type_name */
                    ASTGenerated_type_name jjtn000 = new ASTGenerated_type_name(JJTTYPE_NAME);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) type_name */
        try {
/*@egen*/
	t = <IDENTCAPITALIZED>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	   jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void type(): {/*@bgen(jjtree) type */
  ASTGenerated_type jjtn000 = new ASTGenerated_type(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) type */
        try {
/*@egen*/
	LOOKAHEAD(2)
	type_name()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void statements(): {/*@bgen(jjtree) statements */
  ASTGenerated_statements jjtn000 = new ASTGenerated_statements(JJTSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) statements */
        try {
/*@egen*/

  	statement_pass()
| 	statement_if()
|   statement_while()
|   statement_emit()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_pass(): {/*@bgen(jjtree) statement_pass */
  ASTGenerated_statement_pass jjtn000 = new ASTGenerated_statement_pass(JJTSTATEMENT_PASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) statement_pass */
        try {
/*@egen*/
	<KEYPASS> value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_if(): {/*@bgen(jjtree) statement_if */
  ASTGenerated_statement_if jjtn000 = new ASTGenerated_statement_if(JJTSTATEMENT_IF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) statement_if */
        try {
/*@egen*/
	<KEYIF> value() <PUNCOPENARROW>

	<PUNCCLOSEARROW>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_while(): {/*@bgen(jjtree) statement_while */
  ASTGenerated_statement_while jjtn000 = new ASTGenerated_statement_while(JJTSTATEMENT_WHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) statement_while */
        try {
/*@egen*/
	<KEYWHILE> value() <PUNCOPENARROW>

	<PUNCCLOSEARROW>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_emit(): {/*@bgen(jjtree) statement_emit */
  ASTGenerated_statement_emit jjtn000 = new ASTGenerated_statement_emit(JJTSTATEMENT_EMIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) statement_emit */
        try {
/*@egen*/
	<KEYEMIT> value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//basic data types of the programming language (decimal, integers, strings, and booleans)
void data_type(): {/*@bgen(jjtree) data_type */
                    ASTGenerated_data_type jjtn000 = new ASTGenerated_data_type(JJTDATA_TYPE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) data_type */
   try {
/*@egen*/
   data_type_decimal()
|  data_type_integer()
|  data_type_string()
|  data_type_boolean()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void data_type_decimal():  {/*@bgen(jjtree) data_type_decimal */
                             ASTGenerated_data_type_decimal jjtn000 = new ASTGenerated_data_type_decimal(JJTDATA_TYPE_DECIMAL);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) data_type_decimal */
        try {
/*@egen*/
	t = <DECIMAL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void data_type_integer():  {/*@bgen(jjtree) data_type_integer */
                             ASTGenerated_data_type_integer jjtn000 = new ASTGenerated_data_type_integer(JJTDATA_TYPE_INTEGER);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) data_type_integer */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void data_type_string():  {/*@bgen(jjtree) data_type_string */
                            ASTGenerated_data_type_string jjtn000 = new ASTGenerated_data_type_string(JJTDATA_TYPE_STRING);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) data_type_string */
        try {
/*@egen*/
	t = <STRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void data_type_boolean():  {/*@bgen(jjtree) data_type_boolean */
                             ASTGenerated_data_type_boolean jjtn000 = new ASTGenerated_data_type_boolean(JJTDATA_TYPE_BOOLEAN);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) data_type_boolean */
        try {
/*@egen*/
	t = <BOOLEAN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.setFilteredValueForToken(t);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void value(): {/*@bgen(jjtree) value */
  ASTGenerated_value jjtn000 = new ASTGenerated_value(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) value */
        try {
/*@egen*/
	LOOKAHEAD(3)
    expression_no_parenthesis()
|   LOOKAHEAD(3)
    (<OPNOT>)?
    expression_parenthesis()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    data_type()
|   LOOKAHEAD(2)
    class_method()
|   LOOKAHEAD(2)
    class_property_get()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    func_call()
|   LOOKAHEAD(2)
    class_instantiation()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void values(): {/*@bgen(jjtree) values */
  ASTGenerated_values jjtn000 = new ASTGenerated_values(JJTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) values */
        try {
/*@egen*/
	(
	  value()
	  (
	    <PUNCCOMMA> value()	  )	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void val_no_expression_no_parenthesis(): {/*@bgen(jjtree) val_no_expression_no_parenthesis */
  ASTGenerated_val_no_expression_no_parenthesis jjtn000 = new ASTGenerated_val_no_expression_no_parenthesis(JJTVAL_NO_EXPRESSION_NO_PARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) val_no_expression_no_parenthesis */
        try {
/*@egen*/
	LOOKAHEAD(2)
    (<OPNOT>)?
    expression_parenthesis()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    data_type()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    identifier()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void val_no_expression(): {/*@bgen(jjtree) val_no_expression */
  ASTGenerated_val_no_expression jjtn000 = new ASTGenerated_val_no_expression(JJTVAL_NO_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) val_no_expression */
        try {
/*@egen*/
	LOOKAHEAD(2)
    (<OPNOT>)?
    identifier()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    data_type()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expression_no_parenthesis(): {/*@bgen(jjtree) expression_no_parenthesis */
  ASTGenerated_expression_no_parenthesis jjtn000 = new ASTGenerated_expression_no_parenthesis(JJTEXPRESSION_NO_PARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) expression_no_parenthesis */
        try {
/*@egen*/
	val_no_expression()
    (
        LOOKAHEAD(2)
        operators()
        val_no_expression_no_parenthesis()
    )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void expression_parenthesis(): {/*@bgen(jjtree) expression_parenthesis */
  ASTGenerated_expression_parenthesis jjtn000 = new ASTGenerated_expression_parenthesis(JJTEXPRESSION_PARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) expression_parenthesis */
        try {
/*@egen*/
	<PUNCLEFTPAREN>
	val_no_expression_no_parenthesis()
    (
        LOOKAHEAD(2)
        operators()
        val_no_expression_no_parenthesis()
    )+
	<PUNCRIGHTPAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//used to detect the operator tokens used (addition, subtraction, multiplication, division, modulo, and logical operaters such as &&, ||, >=, <=, ==, etc) are all included
void operators(): {/*@bgen(jjtree) operators */
                    ASTGenerated_operators jjtn000 = new ASTGenerated_operators(JJTOPERATORS);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) operators */
        try {
/*@egen*/
	<OPADD>
|   <OPSUBTRACT>
|   <OPDIVIDE>
|   <OPMULTIPLY>
|   <OPMODULO>
| 	<OPEQUALTO>
| 	<OPNOTEQUALTO>
| 	<OPGREATERTHAN>
| 	<OPLESSTHAN>
| 	<OPGREATERTHANEQUALTO>
| 	<OPLESSTHANEQUALTO>
| 	<OPAND>
| 	<OPOR>
| 	<OPNOT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


SKIP: {
    " "
|   "[COMMENT]"
|   "\t"
|   "\n"
|   "\r"

}

//tokens created by the Magenta lexer are used to declare the tokens for this parser

TOKEN :
{
  <DECIMAL: "[DECIMAL \\d+(\\.\\d{1,2})?]">
| <INTEGER: "[INTEGER (?<=\\s|^)\\d+(?=\\s|$)]">
| <STRING: "[STRING \"[^\"]*\"]">
| <BOOLEAN: "[BOOLEAN true(?=[^_A-Za-z])|false(?=[^_A-Za-z])]">
| <IDENTCAPITALIZED: "[IDENTCAPITALIZED  [A-Z][_A-Za-z]*(?=[^_A-Za-z])]">
| <IDENTLOWERCASE: "[IDENTLOWERCASE [a-z][_A-Za-z]*(?=[^_A-Za-z])]">
| <IDENTUNDERSCORE: "[IDENTUNDERSCORE _[_A-Za-z]*(?=[^_A-Za-z])]">
| <OPADD: "[OPADD]">
| <OPSUBTRACT: "[OPSUBTRACT]">
| <OPMULTIPLY: "[OPMULTIPLY]">
| <OPDIVIDE: "[OPDIVIDE]">
| <OPMODULO: "[OPMODULO]">
| <OPEQUALTO: "[OPEQUALTO]">
| <OPNOTEQUALTO: "[OPNOTEQUALTO]">
| <OPGREATERTHAN: "[OPGREATERTHAN]">
| <OPLESSTHAN: "[OPLESSTHAN]">
| <OPGREATERTHANEQUALTO: "[OPGREATERTHANEQUALTO]">
| <OPLESSTHANEQUALTO: "[OPLESSTHANEQUALTO]">
| <OPAND: "[OPAND]">
| <OPOR: "[OPOR]">
| <OPNOT: "[OPNOT]">
| <PUNCQUESTION: "[PUNCQUESTION]">
| <PUNCCOLON: "[PUNCCOLON]">
| <PUNCSEMICOLON: "[PUNCSEMICOLON]">
| <PUNCCOMMA: "[PUNCCOMMA]">
| <PUNCPERIOD: "[PUNCPERIOD]" >
| <PUNCEQUALSIGN: "[PUNCEQUALSIGN]">
| <PUNCLEFTPAREN: "[PUNCLEFTPAREN]">
| <PUNCRIGHTPAREN: "[PUNCRIGHTPAREN]">
| <PUNCLEFTCURLY: "[PUNCLEFTCURLY]">
| <PUNCRIGHTCURLY: "[PUNCRIGHTCURLY]">
| <PUNCOPENARROW: "[PUNCOPENARROW]">
| <PUNCCLOSEARROW: "[PUNCCLOSEARROW]">
| <KEYIF: "[KEYIF]">
| <KEYFOR: "[KEYFOR]">
| <KEYWHILE: "[KEYWHILE]">
| <KEYBLOCK: "[KEYBLOCK]">
| <KEYEMIT: "[KEYEMIT]">
| <KEYTASK: "[KEYTASK]">
| <KEYNULL: "[KEYNULL]">
| <KEYPASS: "[KEYPASS]">
}