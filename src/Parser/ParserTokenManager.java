/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package Parser;
import Parser.generatednodes.*;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fffffffe204L) != 0L)
            return 12;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_0(0x7fffffffe204L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x7f8000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x7ffe000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x7ff8000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x7f8000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x204L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x7ffe000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x7ff8000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x28004L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x7ffc080000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000200L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x7f8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x7ff8000000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000a00000L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000010000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x200001000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x40a0000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x2500000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x500000000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x4050000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x1022000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x100500204L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x40a00008000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x20a00000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x4080000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000040000L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         break;
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x540200L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0xaa0080000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0xa1400010000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x4L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x40050000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 81:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x500000a00000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x8020000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         break;
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x2008000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x220010060000L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 81:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x80004000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000f00004L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 41:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(8, 2);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(8, 46);
         break;
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x100004000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000510000L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400a00000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0xa0000000L);
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x10020000L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x4008000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0xa00040000L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(9, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(9, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(9, 42);
         break;
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x2040a80000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x820004000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x100008000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x80040000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x1408000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(10, 30);
         break;
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x4200000000L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0xa00000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x504000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(11, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(11, 15);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(11, 21);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(11, 31);
         break;
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 72:
         return jjMoveStringLiteralDfa12_0(active0, 0x500000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x6a00000000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x500000L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x2020080000L);
      case 81:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x5400000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 41:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(13, 19);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(13, 27);
         break;
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x320500000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 87:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L);
      case 89:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(14, 20);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(14, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(14, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(14, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(14, 37);
         break;
      case 63:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L);
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      case 87:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L);
      case 89:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(15, 34);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(15, 36);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(15, 38);
         break;
      case 61:
         return jjMoveStringLiteralDfa16_0(active0, 0x200L);
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      case 81:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      case 91:
         return jjMoveStringLiteralDfa17_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000L);
      case 94:
         return jjMoveStringLiteralDfa18_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(18, 23);
         break;
      case 76:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa20_0(active0, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa21_0(active0, 0x200L);
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(21, 22);
         break;
      case 90:
         return jjMoveStringLiteralDfa22_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa24_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa25_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa26_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa27_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 124:
         return jjMoveStringLiteralDfa28_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa29_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa30_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa31_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa32_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa34_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa35_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa36_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa37_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 94:
         return jjMoveStringLiteralDfa38_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa39_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa40_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa41_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 90:
         return jjMoveStringLiteralDfa42_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa43_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa44_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 122:
         return jjMoveStringLiteralDfa45_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa46_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0);
      return 46;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa47_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0);
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0);
      return 47;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(47, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(46, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjAddStates(0, 5);
                  break;
               case 1:
                  if (curChar == 32)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 41 && kind > 6)
                     kind = 6;
                  break;
               case 13:
                  if (curChar == 32)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 41 && kind > 7)
                     kind = 7;
                  break;
               case 23:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if (curChar == 39)
                     jjCheckNAddStates(6, 8);
                  break;
               case 25:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 27:
                  jjCheckNAddStates(6, 8);
                  break;
               case 28:
                  if (curChar == 41 && kind > 8)
                     kind = 8;
                  break;
               case 29:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 36:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 41 && kind > 10)
                     kind = 10;
                  break;
               case 40:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 57:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 41 && kind > 11)
                     kind = 11;
                  break;
               case 75:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 41 && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 92;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 55;
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 6:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 16:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 26:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  jjCheckNAddStates(6, 8);
                  break;
               case 30:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 31:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if ((0x7fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 41:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 90)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 58:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 62:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 77:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 80:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 22, 35, 56, 74, 93, 25, 26, 29, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, 
"\50\102\117\117\114\105\101\116\40\164\162\165\145\50\77\75\133\136\137\101\55\132\141\55\172\135\51\174\146\141\154\163\145\50\77\75\133\136\137\101\55\132\141\55\172\135\51\51", null, null, null, "\50\117\120\101\104\104\51", 
"\50\117\120\123\125\102\124\122\101\103\124\51", "\50\117\120\115\125\114\124\111\120\114\131\51", 
"\50\117\120\104\111\126\111\104\105\51", "\50\117\120\115\117\104\125\114\117\51", 
"\50\117\120\105\121\125\101\114\124\117\51", "\50\117\120\116\117\124\105\121\125\101\114\124\117\51", 
"\50\117\120\107\122\105\101\124\105\122\124\110\101\116\51", "\50\117\120\114\105\123\123\124\110\101\116\51", 
"\50\117\120\107\122\105\101\124\105\122\124\110\101\116\105\121\125\101\114\124\117\51", "\50\117\120\114\105\123\123\124\110\101\116\105\121\125\101\114\124\117\51", 
"\50\117\120\101\116\104\51", "\50\117\120\117\122\51", "\50\117\120\116\117\124\51", 
"\50\120\125\116\103\121\125\105\123\124\111\117\116\51", "\50\120\125\116\103\103\117\114\117\116\51", 
"\50\120\125\116\103\123\105\115\111\103\117\114\117\116\51", "\50\120\125\116\103\103\117\115\115\101\51", 
"\50\120\125\116\103\120\105\122\111\117\104\51", "\50\120\125\116\103\105\121\125\101\114\123\111\107\116\51", 
"\50\120\125\116\103\114\105\106\124\120\101\122\105\116\51", "\50\120\125\116\103\122\111\107\110\124\120\101\122\105\116\51", 
"\50\120\125\116\103\114\105\106\124\103\125\122\114\131\51", "\50\120\125\116\103\122\111\107\110\124\103\125\122\114\131\51", 
"\50\120\125\116\103\117\120\105\116\101\122\122\117\127\51", "\50\120\125\116\103\103\114\117\123\105\101\122\122\117\127\51", 
"\50\113\105\131\111\106\51", "\50\113\105\131\106\117\122\51", "\50\113\105\131\127\110\111\114\105\51", 
"\50\113\105\131\102\114\117\103\113\51", "\50\113\105\131\105\115\111\124\51", "\50\113\105\131\124\101\123\113\51", 
"\50\113\105\131\116\125\114\114\51", "\50\113\105\131\120\101\123\123\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[94];
private final int[] jjstateSet = new int[188];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 94; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
