/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package Parser;
import Parser.generatednodes.*;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa1_0(0x7fffffffffc4L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c80L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x7f8000000000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x7ffe000L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x7ff8000000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x7f8000000040L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x204L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x7ffe000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x7ff8000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1002000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x41c00L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x28004L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x7ffc080000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000200L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 89:
         return jjMoveStringLiteralDfa4_0(active0, 0x7f8000000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x7ff8000000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000a00080L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000010140L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x200001001c00L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x40a0000L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x2500000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x500000000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x4050000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x1022000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x100500204L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x40a00008000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000040L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1400000000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x20a00000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x4081c00L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000040000L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 93:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         break;
      default :
         return 6;
   }
   return 6;
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x540240L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0xaa0080080L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0xa1400010000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000000800L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x4L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x40050000000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 81:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x500000a00000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0xc000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x8021000L);
      case 93:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(6, 26);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         break;
      default :
         return 7;
   }
   return 7;
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x2008000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0xa00000000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x1400000000L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 75:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x220010060040L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x1200L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000800L);
      case 81:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x80004080L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000f00004L);
      case 85:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 93:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         break;
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x2c0L);
      case 34:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L);
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x100004000L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000510000L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x1400a00000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0xa0000000L);
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x10020000L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x8400L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x4008000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0xa00040000L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 93:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(8, 2);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(8, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(8, 46);
         break;
      default :
         return 9;
   }
   return 9;
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa10_0(active0, 0x80L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x2040a80000L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x820004000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000001800L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x100008000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x80040000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x500000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x1408000000L);
      case 91:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L);
      case 92:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 93:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(9, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(9, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(9, 42);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L);
      default :
         return 10;
   }
   return 10;
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x4200000000L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0xa00000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000001800L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x504400L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 93:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(10, 18);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(10, 30);
         break;
      case 94:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      default :
         return 11;
   }
   return 11;
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L);
      case 43:
         return jjMoveStringLiteralDfa12_0(active0, 0x40L);
      case 60:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L);
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000400L);
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000L);
      case 72:
         return jjMoveStringLiteralDfa12_0(active0, 0x500000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x6a00000000L);
      case 83:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000L);
      case 93:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(11, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(11, 15);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(11, 21);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(11, 31);
         break;
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L);
      default :
         return 12;
   }
   return 12;
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa13_0(active0, 0x40L);
      case 61:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L);
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x500800L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000400L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x2020080000L);
      case 81:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x5400000000L);
      case 93:
         return jjMoveStringLiteralDfa13_0(active0, 0x100L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      default :
         return 13;
   }
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 42:
         return jjMoveStringLiteralDfa14_0(active0, 0x100L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x400L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x320500000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000001000L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 87:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000L);
      case 89:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      case 92:
         return jjMoveStringLiteralDfa14_0(active0, 0xc0L);
      case 93:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(13, 19);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(13, 27);
         break;
      default :
         return 14;
   }
   return 14;
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa15_0(active0, 0x100L);
      case 46:
         return jjMoveStringLiteralDfa15_0(active0, 0x40L);
      case 63:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L);
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x400800L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 87:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000L);
      case 89:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      case 90:
         return jjMoveStringLiteralDfa15_0(active0, 0x400L);
      case 93:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(14, 20);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(14, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(14, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(14, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(14, 35);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(14, 37);
         break;
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x80L);
      default :
         return 15;
   }
   return 15;
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x800L);
      case 61:
         return jjMoveStringLiteralDfa16_0(active0, 0x200L);
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0x1400L);
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
      case 81:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 92:
         return jjMoveStringLiteralDfa16_0(active0, 0x40L);
      case 93:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(15, 8);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(15, 34);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(15, 36);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(15, 38);
         break;
      case 124:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L);
      default :
         return 16;
   }
   return 16;
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000L);
      case 68:
         return jjMoveStringLiteralDfa17_0(active0, 0x400L);
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000L);
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000L);
      case 91:
         return jjMoveStringLiteralDfa17_0(active0, 0xa00L);
      case 94:
         return jjMoveStringLiteralDfa17_0(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x40L);
      default :
         return 17;
   }
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa18_0(active0, 0x400L);
      case 41:
         return jjMoveStringLiteralDfa18_0(active0, 0x80L);
      case 65:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000L);
      case 94:
         return jjMoveStringLiteralDfa18_0(active0, 0x200L);
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x800L);
      case 123:
         return jjMoveStringLiteralDfa18_0(active0, 0x40L);
      default :
         return 18;
   }
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x400L);
      case 45:
         return jjMoveStringLiteralDfa19_0(active0, 0x800L);
      case 49:
         return jjMoveStringLiteralDfa19_0(active0, 0x40L);
      case 76:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      case 91:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000L);
      case 92:
         return jjMoveStringLiteralDfa19_0(active0, 0x80L);
      case 93:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(18, 23);
         break;
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0x200L);
      default :
         return 19;
   }
   return 19;
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 44:
         return jjMoveStringLiteralDfa20_0(active0, 0x40L);
      case 65:
         return jjMoveStringLiteralDfa20_0(active0, 0x200L);
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      case 91:
         return jjMoveStringLiteralDfa20_0(active0, 0x400L);
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x80L);
      case 122:
         return jjMoveStringLiteralDfa20_0(active0, 0x800L);
      default :
         return 20;
   }
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 20;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 20;
   }
   switch(curChar)
   {
      case 43:
         return jjMoveStringLiteralDfa21_0(active0, 0x80L);
      case 45:
         return jjMoveStringLiteralDfa21_0(active0, 0x200L);
      case 50:
         return jjMoveStringLiteralDfa21_0(active0, 0x40L);
      case 65:
         return jjMoveStringLiteralDfa21_0(active0, 0x1400L);
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000L);
      case 93:
         return jjMoveStringLiteralDfa21_0(active0, 0x800L);
      default :
         return 21;
   }
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 21;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 21;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa22_0(active0, 0x80L);
      case 45:
         return jjMoveStringLiteralDfa22_0(active0, 0x1400L);
      case 90:
         return jjMoveStringLiteralDfa22_0(active0, 0x200L);
      case 91:
         return jjMoveStringLiteralDfa22_0(active0, 0x800L);
      case 93:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(21, 22);
         break;
      case 125:
         return jjMoveStringLiteralDfa22_0(active0, 0x40L);
      default :
         return 22;
   }
   return 22;
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 22;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 22;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa23_0(active0, 0x40L);
      case 63:
         return jjMoveStringLiteralDfa23_0(active0, 0x80L);
      case 90:
         return jjMoveStringLiteralDfa23_0(active0, 0x1400L);
      case 95:
         return jjMoveStringLiteralDfa23_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0x200L);
      default :
         return 23;
   }
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 23;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 23;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa24_0(active0, 0x200L);
      case 61:
         return jjMoveStringLiteralDfa24_0(active0, 0x80L);
      case 63:
         return jjMoveStringLiteralDfa24_0(active0, 0x40L);
      case 65:
         return jjMoveStringLiteralDfa24_0(active0, 0x800L);
      case 93:
         return jjMoveStringLiteralDfa24_0(active0, 0x400L);
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000L);
      default :
         return 24;
   }
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 24;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 24;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa25_0(active0, 0x1800L);
      case 91:
         return jjMoveStringLiteralDfa25_0(active0, 0x400L);
      case 92:
         return jjMoveStringLiteralDfa25_0(active0, 0x80L);
      case 93:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(24, 6);
         break;
      case 122:
         return jjMoveStringLiteralDfa25_0(active0, 0x200L);
      default :
         return 25;
   }
   return 25;
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 25;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 25;
   }
   switch(curChar)
   {
      case 90:
         return jjMoveStringLiteralDfa26_0(active0, 0x800L);
      case 93:
         return jjMoveStringLiteralDfa26_0(active0, 0x200L);
      case 95:
         return jjMoveStringLiteralDfa26_0(active0, 0x400L);
      case 115:
         return jjMoveStringLiteralDfa26_0(active0, 0x80L);
      case 122:
         return jjMoveStringLiteralDfa26_0(active0, 0x1000L);
      default :
         return 26;
   }
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 26;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 26;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa27_0(active0, 0x200L);
      case 65:
         return jjMoveStringLiteralDfa27_0(active0, 0x400L);
      case 93:
         return jjMoveStringLiteralDfa27_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa27_0(active0, 0x800L);
      case 124:
         return jjMoveStringLiteralDfa27_0(active0, 0x80L);
      default :
         return 27;
   }
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 27;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 27;
   }
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa28_0(active0, 0x80L);
      case 42:
         return jjMoveStringLiteralDfa28_0(active0, 0x1000L);
      case 45:
         return jjMoveStringLiteralDfa28_0(active0, 0xc00L);
      case 124:
         return jjMoveStringLiteralDfa28_0(active0, 0x200L);
      default :
         return 28;
   }
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 28;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 28;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa29_0(active0, 0x1000L);
      case 41:
         return jjMoveStringLiteralDfa29_0(active0, 0x80L);
      case 90:
         return jjMoveStringLiteralDfa29_0(active0, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa29_0(active0, 0x200L);
      case 122:
         return jjMoveStringLiteralDfa29_0(active0, 0x800L);
      default :
         return 29;
   }
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 29;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 29;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa30_0(active0, 0x1000L);
      case 93:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(29, 7);
         return jjMoveStringLiteralDfa30_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa30_0(active0, 0x600L);
      default :
         return 30;
   }
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 30;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 30;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa31_0(active0, 0x800L);
      case 45:
         return jjMoveStringLiteralDfa31_0(active0, 0x400L);
      case 61:
         return jjMoveStringLiteralDfa31_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa31_0(active0, 0x200L);
      default :
         return 31;
   }
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 31;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 31;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa32_0(active0, 0x800L);
      case 91:
         return jjMoveStringLiteralDfa32_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa32_0(active0, 0x200L);
      case 122:
         return jjMoveStringLiteralDfa32_0(active0, 0x400L);
      default :
         return 32;
   }
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 32;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 32;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa33_0(active0, 0x800L);
      case 93:
         return jjMoveStringLiteralDfa33_0(active0, 0x400L);
      case 94:
         return jjMoveStringLiteralDfa33_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x200L);
      default :
         return 33;
   }
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 33;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 33;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa34_0(active0, 0x200L);
      case 42:
         return jjMoveStringLiteralDfa34_0(active0, 0x400L);
      case 61:
         return jjMoveStringLiteralDfa34_0(active0, 0x800L);
      case 95:
         return jjMoveStringLiteralDfa34_0(active0, 0x1000L);
      default :
         return 34;
   }
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 34;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 34;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa35_0(active0, 0x400L);
      case 63:
         return jjMoveStringLiteralDfa35_0(active0, 0x200L);
      case 65:
         return jjMoveStringLiteralDfa35_0(active0, 0x1000L);
      case 91:
         return jjMoveStringLiteralDfa35_0(active0, 0x800L);
      default :
         return 35;
   }
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 35;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 35;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa36_0(active0, 0x1000L);
      case 61:
         return jjMoveStringLiteralDfa36_0(active0, 0x200L);
      case 63:
         return jjMoveStringLiteralDfa36_0(active0, 0x400L);
      case 94:
         return jjMoveStringLiteralDfa36_0(active0, 0x800L);
      default :
         return 36;
   }
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 36;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 36;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa37_0(active0, 0x400L);
      case 90:
         return jjMoveStringLiteralDfa37_0(active0, 0x1000L);
      case 91:
         return jjMoveStringLiteralDfa37_0(active0, 0x200L);
      case 95:
         return jjMoveStringLiteralDfa37_0(active0, 0x800L);
      default :
         return 37;
   }
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 37;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 37;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa38_0(active0, 0x800L);
      case 91:
         return jjMoveStringLiteralDfa38_0(active0, 0x400L);
      case 94:
         return jjMoveStringLiteralDfa38_0(active0, 0x200L);
      case 97:
         return jjMoveStringLiteralDfa38_0(active0, 0x1000L);
      default :
         return 38;
   }
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 38;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 38;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa39_0(active0, 0x1800L);
      case 94:
         return jjMoveStringLiteralDfa39_0(active0, 0x400L);
      case 95:
         return jjMoveStringLiteralDfa39_0(active0, 0x200L);
      default :
         return 39;
   }
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 39;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 39;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa40_0(active0, 0x200L);
      case 90:
         return jjMoveStringLiteralDfa40_0(active0, 0x800L);
      case 95:
         return jjMoveStringLiteralDfa40_0(active0, 0x400L);
      case 122:
         return jjMoveStringLiteralDfa40_0(active0, 0x1000L);
      default :
         return 40;
   }
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 40;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 40;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa41_0(active0, 0x200L);
      case 65:
         return jjMoveStringLiteralDfa41_0(active0, 0x400L);
      case 93:
         return jjMoveStringLiteralDfa41_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa41_0(active0, 0x800L);
      default :
         return 41;
   }
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 41;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 41;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa42_0(active0, 0x1000L);
      case 45:
         return jjMoveStringLiteralDfa42_0(active0, 0xc00L);
      case 90:
         return jjMoveStringLiteralDfa42_0(active0, 0x200L);
      default :
         return 42;
   }
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 42;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 42;
   }
   switch(curChar)
   {
      case 90:
         return jjMoveStringLiteralDfa43_0(active0, 0x400L);
      case 93:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(42, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa43_0(active0, 0x200L);
      case 122:
         return jjMoveStringLiteralDfa43_0(active0, 0x800L);
      default :
         return 43;
   }
   return 43;
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 43;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 43;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa44_0(active0, 0x200L);
      case 93:
         return jjMoveStringLiteralDfa44_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa44_0(active0, 0x400L);
      default :
         return 44;
   }
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 44;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 44;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa45_0(active0, 0x800L);
      case 45:
         return jjMoveStringLiteralDfa45_0(active0, 0x400L);
      case 122:
         return jjMoveStringLiteralDfa45_0(active0, 0x200L);
      default :
         return 45;
   }
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 45;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 45;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(45, 11);
         return jjMoveStringLiteralDfa46_0(active0, 0x200L);
      case 122:
         return jjMoveStringLiteralDfa46_0(active0, 0x400L);
      default :
         return 46;
   }
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 46;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 46;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa47_0(active0, 0x200L);
      case 93:
         return jjMoveStringLiteralDfa47_0(active0, 0x400L);
      default :
         return 47;
   }
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 47;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 47;
   }
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa48_0(active0, 0x400L);
      case 93:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(47, 9);
         break;
      default :
         return 48;
   }
   return 48;
}
private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 48;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 48;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(48, 10);
         break;
      default :
         return 49;
   }
   return 49;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\133\104\105\103\111\115\101\114\40\134\144\53\50\134\56\134\144\173\61\54\62\175\51\77\135", 
"\133\111\116\124\105\107\105\122\40\50\77\74\75\134\163\174\136\51\134\144\53\50\77\75\134\163\174\44\51\135", "\133\123\124\122\111\116\107\40\42\133\136\42\135\52\42\135", 
"\133\102\117\117\114\105\101\116\40\164\162\165\145\50\77\75\133\136\137\101\55\132\141\55\172\135\51\174\146\141\154\163\145\50\77\75\133\136\137\101\55\132\141\55\172\135\51\135", 
"\133\111\104\105\116\124\103\101\120\111\124\101\114\111\132\105\104\40\40\133\101\55\132\135\133\137\101\55\132\141\55\172\135\52\50\77\75\133\136\137\101\55\132\141\55\172\135\51\135", 
"\133\111\104\105\116\124\114\117\127\105\122\103\101\123\105\40\133\141\55\172\135\133\137\101\55\132\141\55\172\135\52\50\77\75\133\136\137\101\55\132\141\55\172\135\51\135", 
"\133\111\104\105\116\124\125\116\104\105\122\123\103\117\122\105\40\137\133\137\101\55\132\141\55\172\135\52\50\77\75\133\136\137\101\55\132\141\55\172\135\51\135", "\133\117\120\101\104\104\135", 
"\133\117\120\123\125\102\124\122\101\103\124\135", "\133\117\120\115\125\114\124\111\120\114\131\135", 
"\133\117\120\104\111\126\111\104\105\135", "\133\117\120\115\117\104\125\114\117\135", 
"\133\117\120\105\121\125\101\114\124\117\135", "\133\117\120\116\117\124\105\121\125\101\114\124\117\135", 
"\133\117\120\107\122\105\101\124\105\122\124\110\101\116\135", "\133\117\120\114\105\123\123\124\110\101\116\135", 
"\133\117\120\107\122\105\101\124\105\122\124\110\101\116\105\121\125\101\114\124\117\135", 
"\133\117\120\114\105\123\123\124\110\101\116\105\121\125\101\114\124\117\135", "\133\117\120\101\116\104\135", "\133\117\120\117\122\135", 
"\133\117\120\116\117\124\135", "\133\120\125\116\103\121\125\105\123\124\111\117\116\135", 
"\133\120\125\116\103\103\117\114\117\116\135", "\133\120\125\116\103\123\105\115\111\103\117\114\117\116\135", 
"\133\120\125\116\103\103\117\115\115\101\135", "\133\120\125\116\103\120\105\122\111\117\104\135", 
"\133\120\125\116\103\105\121\125\101\114\123\111\107\116\135", "\133\120\125\116\103\114\105\106\124\120\101\122\105\116\135", 
"\133\120\125\116\103\122\111\107\110\124\120\101\122\105\116\135", "\133\120\125\116\103\114\105\106\124\103\125\122\114\131\135", 
"\133\120\125\116\103\122\111\107\110\124\103\125\122\114\131\135", "\133\120\125\116\103\117\120\105\116\101\122\122\117\127\135", 
"\133\120\125\116\103\103\114\117\123\105\101\122\122\117\127\135", "\133\113\105\131\111\106\135", "\133\113\105\131\106\117\122\135", 
"\133\113\105\131\127\110\111\114\105\135", "\133\113\105\131\102\114\117\103\113\135", 
"\133\113\105\131\105\115\111\124\135", "\133\113\105\131\124\101\123\113\135", 
"\133\113\105\131\116\125\114\114\135", "\133\113\105\131\120\101\123\123\135", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[0];
private final int[] jjstateSet = new int[0];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 0; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
