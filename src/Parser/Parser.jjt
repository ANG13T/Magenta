options {
    STATIC = false;
    MULTI = true;
    NODE_PREFIX = "ASTGenerated_";
    NODE_CLASS = "ASTNode";
    NODE_PACKAGE = "Parser.generatednodes";
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Parser)

package Parser;

public class Parser {
    public static void main(String[] args) {
		Parser parser = null;
		
		//Step 1: read file data from input
        try {
          	System.out.println("Reading file: " + args[0]);
            parser = new Parser(new FileInputStream(args[0]));
        } catch (Exception exception) {
            System.out.println("Something went wrong with reading file data.");
            System.out.println("Exception: ");
            System.out.println(exception);
            System.exit(0);
        }

		//Step 2: run the parser code
        try {
			parser.parse();
            ((ASTNode) parser.jjtree.rootNode()).dump("   ");
            RuntimeNode.runRootNode((ASTNode) parser.jjtree.rootNode());
         }catch (Exception exception) {
            System.out.println("Something went wrong.");
            System.out.println("Exception: ");
            System.out.println(exception);
            exception.printStackTrace();
            System.exit(0);
        }
    }
}
PARSER_END(Parser)

void parse(): {} {
    (
        LOOKAHEAD(2)
        class_declaration()
    |   LOOKAHEAD(4)
        func_declaration()
    |   func_action()
    )*
}

void func_action(): {} {
	LOOKAHEAD(2)
	variable_declaration()
|  	LOOKAHEAD(2)
	variable_assignment()
|  	LOOKAHEAD(2)
	class_method() <PUNCSEMICOLON>
|   func_call() <PUNCSEMICOLON>
|   statements() <PUNCSEMICOLON>
}


void func_actions(): {} {
	(
	  LOOKAHEAD(2)
	  func_action()	)*
}

void func_declaration(): {} {
  	<KEYTASK>
	identifier()
	<PUNCLEFTPAREN>
	params()
	<PUNCRIGHTPAREN>
	 type()
	<PUNCOPENARROW>
    func_actions()
    <PUNCCLOSEARROW>
}

void param(): {} {
	type() identifier()
}

void params(): {} {
	(
	  LOOKAHEAD(2)
	  <PUNCCOMMA> param()	)*
}

void func_declartions(): {} {
 (
   func_declaration() )*
}

void class_declaration(): {} {
  	<KEYBLOCK>
	type_name()
    <PUNCOPENARROW>
    variable_assignments()
    variable_declarations()
    func_declartions()
    <PUNCCLOSEARROW>
}

//instantiate a class
void class_instantiation(): { } {
	identifier() <PUNCLEFTPAREN> values() <PUNCRIGHTPAREN>
}

//calling a method from a class
void class_method(): { } {
	identifier() <PUNCPERIOD> func_call()
}

//get property of class
void class_property_get(): {} {
	identifier() <PUNCPERIOD> lowercase_identifier()
} 

//calling a function
void func_call(): {} {
	identifier() <PUNCLEFTPAREN> values() <PUNCRIGHTPAREN>
} 

//assign a variable
void variable_assignment(): {} {
	identifier() <PUNCEQUALSIGN> value() <PUNCSEMICOLON>
}

//multiple variable assignments
void variable_assignments(): {} {
	(
        LOOKAHEAD(2)
        variable_assignment()
    )*
}  

//declare a variable
void variable_declaration(): {} {
	type() identifier() <PUNCEQUALSIGN> value() <PUNCSEMICOLON>
}

//declare multiple variables
void variable_declarations(): {} {
	(
        LOOKAHEAD(2)
        variable_declaration()
    )*
}


void identifier(): { Token t; } {
	underscore_identifier()
| 	lowercase_identifier()
}

//holds the identifier (name) for functions and variables

void underscore_identifier(): {Token t; } {
	t = <IDENTUNDERSCORE>

	{
	  jjtThis.setFilteredValueForToken(t);
	} 
}

void lowercase_identifier(): {Token t; } {
	t = <IDENTLOWERCASE>

	{
	  jjtThis.setFilteredValueForToken(t);
	} 
}

void type_name(): { Token t; } {
	t = <IDENTCAPITALIZED>
	{
	   jjtThis.setFilteredValueForToken(t);
	}
}

void type(): {} {
	type_name()
}


void statements(): {} {

  	statement_pass()
| 	statement_if()
|   statement_while()
|   statement_emit()
}

void statement_pass(): {} {
	<KEYPASS> value()
}

void statement_if(): {} {
	<KEYIF> value() <PUNCOPENARROW>

	<PUNCCLOSEARROW>
}

void statement_while(): {} {
	<KEYWHILE> value() <PUNCOPENARROW>

	<PUNCCLOSEARROW>
}

void statement_emit(): {} {
	<KEYEMIT> value()
}

//basic data types of the programming language (decimal, integers, strings, and booleans)
void data_type(): { Token t; } {
   data_type_decimal()
|  data_type_integer()
|  data_type_string()
|  data_type_boolean()
}

void data_type_decimal():  { Token t; } {
	t = <DECIMAL>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void data_type_integer():  { Token t; } {
	t = <INTEGER>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void data_type_string():  { Token t; } {
	t = <STRING>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void data_type_boolean():  { Token t; } {
	t = <BOOLEAN>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void value(): {} {
	LOOKAHEAD(3)
    expression_no_parenthesis()
|   LOOKAHEAD(3)
    (<OPNOT>)?
    expression_parenthesis()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    data_type()
|   LOOKAHEAD(2)
    class_method()
|   LOOKAHEAD(2)
    class_property_get()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    func_call()
|   LOOKAHEAD(2)
    class_instantiation()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    identifier()
}

void values(): {} {
	(
	  value()
	  (
	    <PUNCCOMMA> value()	  )	)
}

void val_no_expression_no_parenthesis(): {} {
	LOOKAHEAD(2)
    (<OPNOT>)?
    expression_parenthesis()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    data_type()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    identifier()
}

void val_no_expression(): {} {
	LOOKAHEAD(2)
    (<OPNOT>)?
    identifier()
|   LOOKAHEAD(2)
    (<OPNOT>)?
    data_type()
}

void expression_no_parenthesis(): {} {
	val_no_expression()
    (
        LOOKAHEAD(2)
        operators()
        val_no_expression_no_parenthesis()
    )+
}

void expression_parenthesis(): {} {
	<PUNCLEFTPAREN>
	val_no_expression_no_parenthesis()
    (
        LOOKAHEAD(2)
        operators()
        val_no_expression_no_parenthesis()
    )+
	<PUNCRIGHTPAREN>
}

//used to detect the operator tokens used (addition, subtraction, multiplication, division, modulo, and logical operaters such as &&, ||, >=, <=, ==, etc) are all included
void operators(): { Token t; } {
	<OPADD> #operator_addition
|   <OPSUBTRACT> #operator_subtraction
|   <OPDIVIDE> #operator_division
|   <OPMULTIPLY> #operator_multiplication
|   <OPMODULO> #operator_modulous
| 	<OPEQUALTO> #operator_equal_to
| 	<OPNOTEQUALTO> #operator_not_equal_to
| 	<OPGREATERTHAN> #operator_greater_than
| 	<OPLESSTHAN> #operator_less_than
| 	<OPGREATERTHANEQUALTO> #operator_greater_than_equal_to
| 	<OPLESSTHANEQUALTO> #operator_less_than_equal_to
| 	<OPAND> #operator_and
| 	<OPOR> #operator_or
| 	<OPNOT> #operator_not
}


SKIP: {
    " "
|   "(COMMENT)"
|   "(WHITESPACE)"
|   "\t"
|   "\n"
|   "\r"

}

//tokens created by the Magenta lexer are used to declare the tokens for this parser

TOKEN :
{
  <DECIMAL: "(DECIMAL " (["0"-"9"])+ "." (["0"-"9"])+ ")">
| <INTEGER: "(INTEGER "(["0"-"9"])+ ")">
| <STRING: "(STRING " "'" (~["'", "\\"] | ("\\" ~[]))* "')">
| <BOOLEAN: "(BOOLEAN true(?=[^_A-Za-z])|false(?=[^_A-Za-z]))">
| <OPADD: "(OPADD)">
| <OPSUBTRACT: "(OPSUBTRACT)">
| <OPMULTIPLY: "(OPMULTIPLY)">
| <OPDIVIDE: "(OPDIVIDE)">
| <OPMODULO: "(OPMODULO)">
| <OPEQUALTO: "(OPEQUALTO)">
| <OPNOTEQUALTO: "(OPNOTEQUALTO)">
| <OPGREATERTHAN: "(OPGREATERTHAN)">
| <OPLESSTHAN: "(OPLESSTHAN)">
| <OPGREATERTHANEQUALTO: "(OPGREATERTHANEQUALTO)">
| <OPLESSTHANEQUALTO: "(OPLESSTHANEQUALTO)">
| <OPAND: "(OPAND)">
| <OPOR: "(OPOR)">
| <OPNOT: "(OPNOT)">
| <PUNCQUESTION: "(PUNCQUESTION)">
| <PUNCCOLON: "(PUNCCOLON)">
| <PUNCSEMICOLON: "(PUNCSEMICOLON)">
| <PUNCCOMMA: "(PUNCCOMMA)">
| <PUNCPERIOD: "(PUNCPERIOD)">
| <PUNCEQUALSIGN: "(PUNCEQUALSIGN)">
| <PUNCLEFTPAREN: "(PUNCLEFTPAREN)">
| <PUNCRIGHTPAREN: "(PUNCRIGHTPAREN)">
| <PUNCLEFTCURLY: "(PUNCLEFTCURLY)">
| <PUNCRIGHTCURLY: "(PUNCRIGHTCURLY)">
| <PUNCOPENARROW: "(PUNCOPENARROW)">
| <PUNCCLOSEARROW: "(PUNCCLOSEARROW)">
| <KEYIF: "(KEYIF)">
| <KEYFOR: "(KEYFOR)">
| <KEYWHILE: "(KEYWHILE)">
| <KEYBLOCK: "(KEYBLOCK)">
| <KEYEMIT: "(KEYEMIT)">
| <KEYTASK: "(KEYTASK)">
| <KEYNULL: "(KEYNULL)">
| <KEYPASS: "(KEYPASS)">
| <IDENTCAPITALIZED: "(IDENTCAPITALIZED " ["A"-"Z"] (["_", "A"-"Z", "a"-"z"])* ")">
| <IDENTLOWERCASE: "(IDENTLOWERCASE " ["a"-"z"] (["_", "A"-"Z", "a"-"z"])* ")">
| <IDENTUNDERSCORE: "(IDENTUNDERSCORE " "_" (["_", "A"-"Z", "a"-"z"])* ")">
}