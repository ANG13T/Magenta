/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DECIMAL = 6;
  /** RegularExpression Id. */
  int INTEGER = 7;
  /** RegularExpression Id. */
  int STRING = 8;
  /** RegularExpression Id. */
  int BOOLEAN = 9;
  /** RegularExpression Id. */
  int OPADD = 10;
  /** RegularExpression Id. */
  int OPSUBTRACT = 11;
  /** RegularExpression Id. */
  int OPMULTIPLY = 12;
  /** RegularExpression Id. */
  int OPDIVIDE = 13;
  /** RegularExpression Id. */
  int OPMODULO = 14;
  /** RegularExpression Id. */
  int OPEQUALTO = 15;
  /** RegularExpression Id. */
  int OPNOTEQUALTO = 16;
  /** RegularExpression Id. */
  int OPGREATERTHAN = 17;
  /** RegularExpression Id. */
  int OPLESSTHAN = 18;
  /** RegularExpression Id. */
  int OPGREATERTHANEQUALTO = 19;
  /** RegularExpression Id. */
  int OPLESSTHANEQUALTO = 20;
  /** RegularExpression Id. */
  int OPAND = 21;
  /** RegularExpression Id. */
  int OPOR = 22;
  /** RegularExpression Id. */
  int OPNOT = 23;
  /** RegularExpression Id. */
  int PUNCQUESTION = 24;
  /** RegularExpression Id. */
  int PUNCCOLON = 25;
  /** RegularExpression Id. */
  int PUNCSEMICOLON = 26;
  /** RegularExpression Id. */
  int PUNCCOMMA = 27;
  /** RegularExpression Id. */
  int PUNCPERIOD = 28;
  /** RegularExpression Id. */
  int PUNCEQUALSIGN = 29;
  /** RegularExpression Id. */
  int PUNCLEFTPAREN = 30;
  /** RegularExpression Id. */
  int PUNCRIGHTPAREN = 31;
  /** RegularExpression Id. */
  int PUNCLEFTCURLY = 32;
  /** RegularExpression Id. */
  int PUNCRIGHTCURLY = 33;
  /** RegularExpression Id. */
  int PUNCOPENARROW = 34;
  /** RegularExpression Id. */
  int PUNCCLOSEARROW = 35;
  /** RegularExpression Id. */
  int KEYIF = 36;
  /** RegularExpression Id. */
  int KEYFOR = 37;
  /** RegularExpression Id. */
  int KEYWHILE = 38;
  /** RegularExpression Id. */
  int KEYBLOCK = 39;
  /** RegularExpression Id. */
  int KEYEMIT = 40;
  /** RegularExpression Id. */
  int KEYTASK = 41;
  /** RegularExpression Id. */
  int KEYNULL = 42;
  /** RegularExpression Id. */
  int KEYPASS = 43;
  /** RegularExpression Id. */
  int IDENTCAPITALIZED = 44;
  /** RegularExpression Id. */
  int IDENTLOWERCASE = 45;
  /** RegularExpression Id. */
  int IDENTUNDERSCORE = 46;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"(COMMENT)\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<DECIMAL>",
    "<INTEGER>",
    "<STRING>",
    "\"(BOOLEAN true(?=[^_A-Za-z])|false(?=[^_A-Za-z]))\"",
    "\"(OPADD)\"",
    "\"(OPSUBTRACT)\"",
    "\"(OPMULTIPLY)\"",
    "\"(OPDIVIDE)\"",
    "\"(OPMODULO)\"",
    "\"(OPEQUALTO)\"",
    "\"(OPNOTEQUALTO)\"",
    "\"(OPGREATERTHAN)\"",
    "\"(OPLESSTHAN)\"",
    "\"(OPGREATERTHANEQUALTO)\"",
    "\"(OPLESSTHANEQUALTO)\"",
    "\"(OPAND)\"",
    "\"(OPOR)\"",
    "\"(OPNOT)\"",
    "\"(PUNCQUESTION)\"",
    "\"(PUNCCOLON)\"",
    "\"(PUNCSEMICOLON)\"",
    "\"(PUNCCOMMA)\"",
    "\"(PUNCPERIOD)\"",
    "\"(PUNCEQUALSIGN)\"",
    "\"(PUNCLEFTPAREN)\"",
    "\"(PUNCRIGHTPAREN)\"",
    "\"(PUNCLEFTCURLY)\"",
    "\"(PUNCRIGHTCURLY)\"",
    "\"(PUNCOPENARROW)\"",
    "\"(PUNCCLOSEARROW)\"",
    "\"(KEYIF)\"",
    "\"(KEYFOR)\"",
    "\"(KEYWHILE)\"",
    "\"(KEYBLOCK)\"",
    "\"(KEYEMIT)\"",
    "\"(KEYTASK)\"",
    "\"(KEYNULL)\"",
    "\"(KEYPASS)\"",
    "<IDENTCAPITALIZED>",
    "<IDENTLOWERCASE>",
    "<IDENTUNDERSCORE>",
  };

}
