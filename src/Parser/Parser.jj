
PARSER_BEGIN(Parser)


public class Parser {
    public static void main(String[] args) {

        try {
            Parser parser = new Parser(new FileInputStream(args[0]));
            parser.parse();
        } catch (Exception exception) {
            System.out.println("Something went wrong.");
            System.out.println("Exception: ");
            System.out.println(exception);
        }
    }
}
PARSER_END(Parser)


void identifiers(): { Token t; } {
	underscore_identifier()
| 	lowercase_identifier()
}

//holds the identifier (name) for functions and variables

void underscore_identifier(): {Token t; } {
	t = <IDENTUNDERSCORE>

	{
	  jjtThis.setFilteredValueForToken(t);
	} 
}

void lowercase_identifier(): {Token t; } {
	t = <IDENTLOWERCASE>

	{
	  jjtThis.setFilteredValueForToken(t);
	} 
}

void type_name(): { Token t; } {
	t = <IDENTCAPITALIZED>
	{
	   jjtThis.setFilteredValueForToken(t);
	}
}

void type(): {} {
	LOOKAHEAD(2)
	type_name()
}


void statements(): {} {

  	statement_pass()
| 	statement_if()
|   statement_while()
|   statement_emit()
}

void statement_pass(): {} {
	<KEYPASS> value()
}

void statement_if(): {} {
	<KEYIF> value() <PUNCOPENARROW>

	<PUNCCLOSEARROW>
}

void statement_while(): {} {
	<KEYWHILE> value() <PUNCOPENARROW>

	<PUNCCLOSEARROW>
}

void statement_emit(): {} {
	<KEYEMIT> value()
}

//basic data types of the programming language (decimal, integers, strings, and booleans)
void data_types(): { Token t; } {
   data_type_decimal()
|  data_type_integer()
|  data_type_string()
|  data_type_boolean()
}

void data_type_decimal():  { Token t; } {
	t = <DECIMAL>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void data_type_integer():  { Token t; } {
	t = <INTEGER>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void data_type_string():  { Token t; } {
	t = <STRING>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

void data_type_boolean():  { Token t; } {
	t = <BOOLEAN>
	{
	  jjtThis.setFilteredValueForToken(t);
	}
}

//used to detect the operator tokens used (addition, subtraction, multiplication, division, modulo, and logical operaters such as &&, ||, >=, <=, ==, etc) are all included
void operators(): { Token t; } {
	<OPADD>
|   <OPSUBTRACT>
|   <OPDIVIDE>
|   <OPMULTIPLY>
|   <OPMODULO>
| 	<OPEQUALTO>
| 	<OPNOTEQUALTO>
| 	<OPGREATERTHAN>
| 	<OPLESSTHAN>
| 	<OPGREATERTHANEQUALTO>
| 	<OPLESSTHANEQUALTO>
| 	<OPAND>
| 	<OPOR>
| 	<OPNOT>
}


SKIP: {
    " "
|   "[COMMENT]"
|   "\t"
|   "\n"
|   "\r"

}

//tokens created by the Magenta lexer are used to declare the tokens for this parser

TOKEN :
{
  <DECIMAL: "[DECIMAL \\d+(\\.\\d{1,2})?]">
| <INTEGER: "[INTEGER (?<=\\s|^)\\d+(?=\\s|$)]">
| <STRING: "[STRING \"[^\"]*\"]">
| <BOOLEAN: "[BOOLEAN true(?=[^_A-Za-z])|false(?=[^_A-Za-z])]">
| <IDENTCAPITALIZED: "[IDENTCAPITALIZED  [A-Z][_A-Za-z]*(?=[^_A-Za-z])]">
| <IDENTLOWERCASE: "[IDENTLOWERCASE [a-z][_A-Za-z]*(?=[^_A-Za-z])]">
| <IDENTUNDERSCORE: "[IDENTUNDERSCORE _[_A-Za-z]*(?=[^_A-Za-z])]">
| <OPADD: "[OPADD]">
| <OPSUBTRACT: "[OPSUBTRACT]">
| <OPMULTIPLY: "[OPMULTIPLY]">
| <OPDIVIDE: "[OPDIVIDE]">
| <OPMODULO: "[OPMODULO]">
| <OPEQUALTO: "[OPEQUALTO]">
| <OPNOTEQUALTO: "[OPNOTEQUALTO]">
| <OPGREATERTHAN: "[OPGREATERTHAN]">
| <OPLESSTHAN: "[OPLESSTHAN]">
| <OPGREATERTHANEQUALTO: "[OPGREATERTHANEQUALTO]">
| <OPLESSTHANEQUALTO: "[OPLESSTHANEQUALTO]">
| <OPAND: "[OPAND]">
| <OPOR: "[OPOR]">
| <OPNOT: "[OPNOT]">
| <PUNCQUESTION: "[PUNCQUESTION]">
| <PUNCCOLON: "[PUNCCOLON]">
| <PUNCSEMICOLON: "[PUNCSEMICOLON]">
| <PUNCCOMMA: "[PUNCCOMMA]">
| <PUNCLEFTPAREN: "[PUNCLEFTPAREN]">
| <PUNCRIGHTPAREN: "[PUNCRIGHTPAREN]">
| <PUNCLEFTCURLY: "[PUNCLEFTCURLY]">
| <PUNCRIGHTCURLY: "[PUNCRIGHTCURLY]">
| <PUNCOPENARROW: "[PUNCOPENARROW]">
| <PUNCCLOSEARROW: "[PUNCCLOSEARROW]">
| <KEYIF: "[KEYIF]">
| <KEYFOR: "[KEYFOR]">
| <KEYWHILE: "[KEYWHILE]">
| <KEYBLOCK: "[KEYBLOCK]">
| <KEYEMIT: "[KEYEMIT]">
| <KEYTASK: "[KEYTASK]">
| <KEYNULL: "[KEYNULL]">
| <KEYPASS: "[KEYPASS]">
}